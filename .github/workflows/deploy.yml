name: Backend CICD

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TAG: prod

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      # Only include if build script exists
      - name: Build 
        run: npm run build

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set environment variables
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            touch .env          
            echo "TAG=prod" >> $GITHUB_ENV
            echo "DATABASE_URL = postgresql://casino:Tkw6Ew7eE7DJmBa@159.69.39.250:5432/casino" >> .env
            echo "PORT = 5000" >> .env
            echo "JWT_SECRET=e38985930b703379654ec4489c93e499b6b3c76fd895b5450481c9ba1950a137b7f29258b70f2299a0273f345625ea7fe7716839d4635de6f74df72749bf55d8" >> .env
            echo "FRONTEND_URL= https://interactioncasino.com" >> .env
          fi
   

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
            docker stop casino-backend || true
            docker rm casino-backend || true
            docker run -d --name casino-backend --network postgresql_interactive -p 5000:5000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
            docker image prune -f
